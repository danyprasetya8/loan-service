// Code generated by MockGen. DO NOT EDIT.
// Source: loan-service/internal/repository/loaninvestment (interfaces: ILoanInvestmentRepository)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_loan_investment_repository.go -package=mocks loan-service/internal/repository/loaninvestment ILoanInvestmentRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "loan-service/internal/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockILoanInvestmentRepository is a mock of ILoanInvestmentRepository interface.
type MockILoanInvestmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockILoanInvestmentRepositoryMockRecorder
	isgomock struct{}
}

// MockILoanInvestmentRepositoryMockRecorder is the mock recorder for MockILoanInvestmentRepository.
type MockILoanInvestmentRepositoryMockRecorder struct {
	mock *MockILoanInvestmentRepository
}

// NewMockILoanInvestmentRepository creates a new mock instance.
func NewMockILoanInvestmentRepository(ctrl *gomock.Controller) *MockILoanInvestmentRepository {
	mock := &MockILoanInvestmentRepository{ctrl: ctrl}
	mock.recorder = &MockILoanInvestmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILoanInvestmentRepository) EXPECT() *MockILoanInvestmentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockILoanInvestmentRepository) Create(en *entity.LoanInvestment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", en)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockILoanInvestmentRepositoryMockRecorder) Create(en any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockILoanInvestmentRepository)(nil).Create), en)
}

// GetByLoanAndInvestor mocks base method.
func (m *MockILoanInvestmentRepository) GetByLoanAndInvestor(loanID, investorID string) *entity.LoanInvestment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLoanAndInvestor", loanID, investorID)
	ret0, _ := ret[0].(*entity.LoanInvestment)
	return ret0
}

// GetByLoanAndInvestor indicates an expected call of GetByLoanAndInvestor.
func (mr *MockILoanInvestmentRepositoryMockRecorder) GetByLoanAndInvestor(loanID, investorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLoanAndInvestor", reflect.TypeOf((*MockILoanInvestmentRepository)(nil).GetByLoanAndInvestor), loanID, investorID)
}

// GetByLoanID mocks base method.
func (m *MockILoanInvestmentRepository) GetByLoanID(loanID string) []entity.LoanInvestment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLoanID", loanID)
	ret0, _ := ret[0].([]entity.LoanInvestment)
	return ret0
}

// GetByLoanID indicates an expected call of GetByLoanID.
func (mr *MockILoanInvestmentRepositoryMockRecorder) GetByLoanID(loanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLoanID", reflect.TypeOf((*MockILoanInvestmentRepository)(nil).GetByLoanID), loanID)
}

// Save mocks base method.
func (m *MockILoanInvestmentRepository) Save(en *entity.LoanInvestment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", en)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockILoanInvestmentRepositoryMockRecorder) Save(en any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockILoanInvestmentRepository)(nil).Save), en)
}

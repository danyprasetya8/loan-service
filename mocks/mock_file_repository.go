// Code generated by MockGen. DO NOT EDIT.
// Source: loan-service/internal/repository/file (interfaces: IFileRepository)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_file_repository.go -package=mocks loan-service/internal/repository/file IFileRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "loan-service/internal/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIFileRepository is a mock of IFileRepository interface.
type MockIFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIFileRepositoryMockRecorder
	isgomock struct{}
}

// MockIFileRepositoryMockRecorder is the mock recorder for MockIFileRepository.
type MockIFileRepositoryMockRecorder struct {
	mock *MockIFileRepository
}

// NewMockIFileRepository creates a new mock instance.
func NewMockIFileRepository(ctrl *gomock.Controller) *MockIFileRepository {
	mock := &MockIFileRepository{ctrl: ctrl}
	mock.recorder = &MockIFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileRepository) EXPECT() *MockIFileRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIFileRepository) Create(en *entity.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", en)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIFileRepositoryMockRecorder) Create(en any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIFileRepository)(nil).Create), en)
}

// Get mocks base method.
func (m *MockIFileRepository) Get(id string) *entity.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.File)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockIFileRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIFileRepository)(nil).Get), id)
}

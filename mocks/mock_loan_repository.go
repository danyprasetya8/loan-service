// Code generated by MockGen. DO NOT EDIT.
// Source: loan-service/internal/repository/loan (interfaces: ILoanRepository)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_loan_repository.go -package=mocks loan-service/internal/repository/loan ILoanRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	constant "loan-service/internal/constant"
	entity "loan-service/internal/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockILoanRepository is a mock of ILoanRepository interface.
type MockILoanRepository struct {
	ctrl     *gomock.Controller
	recorder *MockILoanRepositoryMockRecorder
	isgomock struct{}
}

// MockILoanRepositoryMockRecorder is the mock recorder for MockILoanRepository.
type MockILoanRepositoryMockRecorder struct {
	mock *MockILoanRepository
}

// NewMockILoanRepository creates a new mock instance.
func NewMockILoanRepository(ctrl *gomock.Controller) *MockILoanRepository {
	mock := &MockILoanRepository{ctrl: ctrl}
	mock.recorder = &MockILoanRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILoanRepository) EXPECT() *MockILoanRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockILoanRepository) Count(status constant.LoanStatus) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", status)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockILoanRepositoryMockRecorder) Count(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockILoanRepository)(nil).Count), status)
}

// Create mocks base method.
func (m *MockILoanRepository) Create(en *entity.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", en)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockILoanRepositoryMockRecorder) Create(en any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockILoanRepository)(nil).Create), en)
}

// Get mocks base method.
func (m *MockILoanRepository) Get(id string) *entity.Loan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.Loan)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockILoanRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockILoanRepository)(nil).Get), id)
}

// GetDetail mocks base method.
func (m *MockILoanRepository) GetDetail(id string) *entity.Loan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetail", id)
	ret0, _ := ret[0].(*entity.Loan)
	return ret0
}

// GetDetail indicates an expected call of GetDetail.
func (mr *MockILoanRepositoryMockRecorder) GetDetail(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetail", reflect.TypeOf((*MockILoanRepository)(nil).GetDetail), id)
}

// GetList mocks base method.
func (m *MockILoanRepository) GetList(status constant.LoanStatus, page, size int) []entity.Loan {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", status, page, size)
	ret0, _ := ret[0].([]entity.Loan)
	return ret0
}

// GetList indicates an expected call of GetList.
func (mr *MockILoanRepositoryMockRecorder) GetList(status, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockILoanRepository)(nil).GetList), status, page, size)
}

// Save mocks base method.
func (m *MockILoanRepository) Save(en *entity.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", en)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockILoanRepositoryMockRecorder) Save(en any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockILoanRepository)(nil).Save), en)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: loan-service/internal/service/file (interfaces: IFileService)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_file_service.go -package=mocks loan-service/internal/service/file IFileService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	constant "loan-service/internal/constant"
	file "loan-service/internal/service/file"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIFileService is a mock of IFileService interface.
type MockIFileService struct {
	ctrl     *gomock.Controller
	recorder *MockIFileServiceMockRecorder
	isgomock struct{}
}

// MockIFileServiceMockRecorder is the mock recorder for MockIFileService.
type MockIFileServiceMockRecorder struct {
	mock *MockIFileService
}

// NewMockIFileService creates a new mock instance.
func NewMockIFileService(ctrl *gomock.Controller) *MockIFileService {
	mock := &MockIFileService{ctrl: ctrl}
	mock.recorder = &MockIFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileService) EXPECT() *MockIFileServiceMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockIFileService) Find(id string) *file.Model {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*file.Model)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockIFileServiceMockRecorder) Find(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIFileService)(nil).Find), id)
}

// IsExist mocks base method.
func (m *MockIFileService) IsExist(id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExist indicates an expected call of IsExist.
func (mr *MockIFileServiceMockRecorder) IsExist(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockIFileService)(nil).IsExist), id)
}

// Save mocks base method.
func (m *MockIFileService) Save(arg0 *multipart.FileHeader, fType constant.FileType, pathPrefix, requestedBy string) (*file.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, fType, pathPrefix, requestedBy)
	ret0, _ := ret[0].(*file.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockIFileServiceMockRecorder) Save(arg0, fType, pathPrefix, requestedBy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIFileService)(nil).Save), arg0, fType, pathPrefix, requestedBy)
}

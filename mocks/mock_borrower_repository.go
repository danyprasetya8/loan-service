// Code generated by MockGen. DO NOT EDIT.
// Source: loan-service/internal/repository/borrower (interfaces: IBorrowerRepository)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_borrower_repository.go -package=mocks loan-service/internal/repository/borrower IBorrowerRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "loan-service/internal/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIBorrowerRepository is a mock of IBorrowerRepository interface.
type MockIBorrowerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBorrowerRepositoryMockRecorder
	isgomock struct{}
}

// MockIBorrowerRepositoryMockRecorder is the mock recorder for MockIBorrowerRepository.
type MockIBorrowerRepositoryMockRecorder struct {
	mock *MockIBorrowerRepository
}

// NewMockIBorrowerRepository creates a new mock instance.
func NewMockIBorrowerRepository(ctrl *gomock.Controller) *MockIBorrowerRepository {
	mock := &MockIBorrowerRepository{ctrl: ctrl}
	mock.recorder = &MockIBorrowerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBorrowerRepository) EXPECT() *MockIBorrowerRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockIBorrowerRepository) Count() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockIBorrowerRepositoryMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIBorrowerRepository)(nil).Count))
}

// Create mocks base method.
func (m *MockIBorrowerRepository) Create(en *entity.Borrower) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", en)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIBorrowerRepositoryMockRecorder) Create(en any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIBorrowerRepository)(nil).Create), en)
}

// Delete mocks base method.
func (m *MockIBorrowerRepository) Delete(id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIBorrowerRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIBorrowerRepository)(nil).Delete), id)
}

// GetByID mocks base method.
func (m *MockIBorrowerRepository) GetByID(id string) *entity.Borrower {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*entity.Borrower)
	return ret0
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIBorrowerRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIBorrowerRepository)(nil).GetByID), id)
}

// GetList mocks base method.
func (m *MockIBorrowerRepository) GetList(page, size int) []entity.Borrower {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", page, size)
	ret0, _ := ret[0].([]entity.Borrower)
	return ret0
}

// GetList indicates an expected call of GetList.
func (mr *MockIBorrowerRepositoryMockRecorder) GetList(page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockIBorrowerRepository)(nil).GetList), page, size)
}
